import type { ConfigBuilderCallback } from '@equinor/fusion-framework-module';
import type { IModel, IEmbed, IVectorStore } from './lib/types.js';

/**
 * Represents either a value of type T or a callback that creates a value of type T
 */
export type ValueOrCallback<T> = T | ConfigBuilderCallback<T>;

/**
 * Configuration object generated by the AIConfigurator
 */
export type AIModuleConfig = {
  /** Configured models by identifier */
  models?: Record<string, IModel>;
  /** Configured embeddings by identifier */
  embeddings?: Record<string, IEmbed>;
  /** Configured vector stores by identifier */
  vectorStores?: Record<string, IVectorStore>;
};

/**
 * Interface for AI service configuration.
 *
 * Provides a fluent API for configuring AI services including language models,
 * embeddings, and vector stores. Supports both eager initialization (direct instances)
 * and lazy initialization (factory functions).
 */
export interface IAIConfigurator {
  /**
   * Registers a language model configuration.
   */
  setModel(identifier: string, modelOrFactory: ValueOrCallback<IModel>): this;

  /**
   * Registers an embedding service configuration.
   */
  setEmbedding(identifier: string, embeddingOrFactory: ValueOrCallback<IEmbed>): this;

  /**
   * Registers a vector store configuration.
   */
  setVectorStore(identifier: string, vectorStoreOrFactory: ValueOrCallback<IVectorStore>): this;
}
